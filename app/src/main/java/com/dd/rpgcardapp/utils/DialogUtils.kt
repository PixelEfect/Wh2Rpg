package com.dd.rpgcardapp.utils

import android.app.AlertDialog
import android.content.Context
import android.content.res.Resources
import android.view.ViewGroup
import android.view.WindowManager
import android.widget.ArrayAdapter
import android.widget.GridView
import androidx.core.content.ContextCompat
import com.dd.rpgcardapp.R
import android.widget.TextView
import android.widget.LinearLayout
import android.text.TextUtils
import android.util.TypedValue
import android.widget.ScrollView

fun showAlertDialog(
    context: Context,
    title: String? = null,
    items: List<String>,
    onItemSelected: (String) -> Unit
) {
    val dialog = AlertDialog.Builder(context).apply {
        title?.let { setTitle(it) }
        setItems(items.toTypedArray()) { dialog, which ->
            onItemSelected(items[which])
            dialog.dismiss()
        }
    }.create()

    dialog.show()

    // ðŸª„ Ustawiamy marginesy (np. 40dp po bokach)
    val marginHorizontalDp = 60
    val scale = context.resources.displayMetrics.density
    val marginPx = (marginHorizontalDp * scale).toInt()

    dialog.window?.setLayout(
        context.resources.displayMetrics.widthPixels - (2 * marginPx),
        WindowManager.LayoutParams.WRAP_CONTENT
    )

    dialog.window?.setBackgroundDrawable(
        ContextCompat.getDrawable(context, R.drawable.bg_alert_dialog)
    )
}

fun showAlertDialogWithTiles(
    context: Context,
    title: String? = null,
    items: List<String>,
    onItemSelected: (String) -> Unit
) {
    // Tworzymy dialog wczeÅ›niej, aby byÅ‚ dostÄ™pny w caÅ‚ej funkcji
    val dialog = AlertDialog.Builder(context).apply {
        setCancelable(false)  // Zapobiega zamkniÄ™ciu dialogu przez klikniÄ™cie poza nim
    }.create()

    // Tworzymy TextView dla komunikatu
    val messageTextView = TextView(context).apply {
        text = title // Komunikat przekazywany do tytuÅ‚u
        setPadding(40, 20, 40, 20) // Padding wokÃ³Å‚ tekstu
        setTextSize(TypedValue.COMPLEX_UNIT_SP, 16f) // Ustawiamy rozmiar czcionki
        setLineSpacing(1.5f, 1f) // Ustawiamy odstÄ™py miÄ™dzy wierszami
        maxLines = 5  // MoÅ¼emy ustawiÄ‡ limit linii, by zapewniÄ‡ odpowiedniÄ… wysokoÅ›Ä‡
        ellipsize = TextUtils.TruncateAt.END  // Skracamy tekst, jeÅ›li jest za dÅ‚ugi
    }

    // Tworzymy ScrollView, aby umoÅ¼liwiÄ‡ przewijanie tekstu, jeÅ›li jest zbyt dÅ‚ugi
    val scrollView = ScrollView(context)
    scrollView.addView(messageTextView)

    // Tworzymy GridView dla kafelkÃ³w
    val gridView = GridView(context).apply {
        numColumns = items.size // Liczba kolumn w GridView
        layoutParams = ViewGroup.LayoutParams(
            ViewGroup.LayoutParams.MATCH_PARENT,
            ViewGroup.LayoutParams.WRAP_CONTENT
        )
        adapter = object : ArrayAdapter<String>(context, R.layout.button_item, R.id.item_text, items) {}
        setOnItemClickListener { _, _, position, _ ->
            onItemSelected(items[position])
            dialog.dismiss()  // Zamykamy dialog po wybraniu elementu
        }
    }

    // Ustawiamy widok na dialogu (pierwszy bÄ™dzie komunikat, potem kafelki)
    val linearLayout = LinearLayout(context).apply {
        orientation = LinearLayout.VERTICAL
        addView(scrollView) // Dodajemy ScrollView z komunikatem
        addView(gridView)   // Dodajemy GridView z kafelkami
    }

    dialog.setView(linearLayout)  // Ustawiamy caÅ‚y ukÅ‚ad w dialogu
    dialog.show()

    // Ustawianie marginesÃ³w i wyglÄ…du dialogu
    val marginHorizontalDp = 60
    val scale = context.resources.displayMetrics.density
    val marginPx = (marginHorizontalDp * scale).toInt()

    dialog.window?.setLayout(
        context.resources.displayMetrics.widthPixels - (2 * marginPx),
        WindowManager.LayoutParams.WRAP_CONTENT
    )

    dialog.window?.setBackgroundDrawable(
        ContextCompat.getDrawable(context, R.drawable.bg_alert_dialog)
    )
}
val Int.dp: Int
    get() = (this * Resources.getSystem().displayMetrics.density).toInt()
